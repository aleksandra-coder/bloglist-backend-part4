{"version":3,"sources":["components/Blog.js","components/Notification.js","services/blogs.js","services/login.js","App.js","index.js"],"names":["Blog","blog","title","author","Notification","message","className","baseUrl","axios","get","then","response","data","newToken","login","credentials","a","post","App","useState","blogs","setBlogs","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","blogService","loggedUserJSON","window","localStorage","getItem","JSON","parse","token","handleLogin","event","preventDefault","loginService","setItem","stringify","setTimeout","onSubmit","type","value","name","onChange","target","map","id","ReactDOM","render","document","getElementById"],"mappings":"qMAOeA,EANF,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACX,gCACGA,EAAKC,MADR,IACgBD,EAAKE,WCWNC,EAZI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,qBAAKC,UAAU,QAAf,SACGD,K,gBCRHE,EAAU,YA4BC,EAnBF,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAiB5B,EAxBA,SAAAC,GACV,iBAAaA,ICGL,GAAEC,MANN,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACWR,IAAMS,KAHf,YAG6BF,GAD/B,cACNJ,EADM,yBAELA,EAASC,MAFJ,2CAAH,uDC6IIM,EAzIH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAIwBF,mBAAS,MAJjC,mBAITG,EAJS,KAIKC,EAJL,OAMgBJ,mBAAS,IANzB,mBAMTK,EANS,KAMCC,EAND,OAOgBN,mBAAS,IAPzB,mBAOTO,EAPS,KAOCC,EAPD,OAQQR,mBAAS,MARjB,mBAQTS,EARS,KAQHC,EARG,KAUhBC,qBAAU,WACRC,IAECrB,MAAK,SAAAU,GAAK,OACTC,EAAUD,QAEX,IAIHU,qBAAU,WACR,IAAME,EAAiBC,OAAOC,aAAaC,QAAQ,qBACnD,GAAIH,EAAgB,CAClB,IAAMJ,EAAOQ,KAAKC,MAAML,GACxBH,EAAQD,GACRG,EAAqBH,EAAKU,UAE3B,IA+BH,IAAMC,EAAW,uCAAG,WAAOC,GAAP,eAAAxB,EAAA,6DAClBwB,EAAMC,iBADY,kBAIGC,EAAa5B,MAAM,CACpCU,WAAUE,aALI,OAIVE,EAJU,OAQhBK,OAAOC,aAAaS,QAClB,oBAAqBP,KAAKQ,UAAUhB,IAEtCG,EAAqBH,EAAKU,OAC1BT,EAAQD,GACRH,EAAY,IACZE,EAAY,IAdI,kDAgBhBJ,EAAgB,qBAChBsB,YAAW,WACTtB,EAAgB,QACf,KAnBa,0DAAH,sDAuBjB,OAAa,OAATK,EAEA,gCACE,uDACA,uBAAMkB,SAAUP,EAAhB,UACA,2CAEE,uBACAQ,KAAK,OACLC,MAAOxB,EACPyB,KAAK,WACLC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgB1B,EAAY0B,EAAOH,aAGjD,2CAEI,uBACAD,KAAK,WACLC,MAAOtB,EACPuB,KAAK,WACLC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBxB,EAAYwB,EAAOH,aAGjD,wBAAQD,KAAK,SAAb,yBAOF,gCACE,uCACA,8BACI,8BAAInB,EAAKqB,KAAT,kBAGH7B,EAAMgC,KAAI,SAAAnD,GAAI,OACb,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAKoD,OAElB,cAAC,EAAD,CAAchD,QAASiB,QC3H7BgC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.17fa20f0.chunk.js","sourcesContent":["import React from 'react'\r\nconst Blog = ({blog}) => (\r\n  <div>\r\n    {blog.title} {blog.author}\r\n  </div>  \r\n)\r\n\r\nexport default Blog","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import axios from 'axios'\r\nconst baseUrl = 'api/blogs'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n  token = `bearer ${newToken}`\r\n}\r\n\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  const create = async newObject => {\r\n    const config = {\r\n      headers: { Authorization: token },\r\n    }\r\n    const response = await axios.post(baseUrl, newObject, config)\r\n    return response.data\r\n  }\r\n  \r\n  const update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n  \r\n  // eslint-disable-next-line import/no-anonymous-default-export\r\n  export default { \r\n    getAll, create, update, setToken \r\n  }\r\n\r\n","import axios from 'axios'\r\nconst baseUrl = 'api/login'\r\n\r\nconst login = async credentials => {\r\n  const response = await axios.post(baseUrl, credentials)\r\n  return response.data\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default { login }\r\n","import React, { useState, useEffect } from 'react'\r\nimport Blog from './components/Blog'\r\nimport Notification from './components/Notification'\r\n// import Footer from './components/Footer'\r\nimport blogService from './services/blogs'\r\nimport loginService from './services/login' \r\n\r\nconst App = () => {\r\n  const [blogs, setBlogs] = useState([])\r\n  // const [newBlog, setNewBlog] = useState('')\r\n  // const [showAll, setShowAll] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  const [username, setUsername] = useState('') \r\n  const [password, setPassword] = useState('') \r\n  const [user, setUser] = useState(null)\r\n\r\n  useEffect(() => {\r\n    blogService\r\n    .getAll()\r\n    .then(blogs =>\r\n      setBlogs( blogs )\r\n    )  \r\n  }, [])\r\n\r\n\r\n  // effect hook to handle the first loading of the page: The empty array as the parameter of the effect ensures that the effect is executed only when the component is rendered for the first time.\r\n  useEffect(() => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser')\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON)\r\n      setUser(user)\r\n      blogService.setToken(user.token)\r\n    }\r\n  }, [])\r\n\r\n\r\n  // const addBlog = (event) => {\r\n  //   event.preventDefault()\r\n  //   const blogObject = {\r\n  //     title: newBlog,\r\n  //     author: blogAuthor,\r\n      \r\n  //   }\r\n\r\n  //   blogService\r\n  //     .create(blogObject)\r\n  //       .then(returnedBlog => {\r\n  //       setBlogs(blogs.concat(returnedBlog))\r\n  //       setNewBlog('')\r\n  //     })\r\n  // }\r\n   \r\n  \r\n\r\n  // const handleBlogChange = (event) => {\r\n  //   console.log(event.target.value)\r\n  //   setNewBlog(event.target.value)\r\n  // }\r\n\r\n  // const blogsToShow = showAll\r\n  // ? blogs\r\n  // : blogs\r\n\r\n  //  The method for handling the login:\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault()\r\n\r\n    try {\r\n      const user = await loginService.login({\r\n        username, password,\r\n      })\r\n      // saving the login details to local storage:\r\n      window.localStorage.setItem(\r\n        'loggedBlogappUser', JSON.stringify(user)\r\n      ) \r\n      blogService.setToken(user.token)\r\n      setUser(user)\r\n      setUsername('')\r\n      setPassword('')\r\n    } catch (exception) {\r\n      setErrorMessage('Wrong credentials')\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    }\r\n  }\r\n\r\n  if (user === null) {\r\n    return (\r\n      <div>\r\n        <h2>Log in to application</h2>\r\n        <form onSubmit={handleLogin}>\r\n        <div>\r\n        username\r\n          <input\r\n          type=\"text\"\r\n          value={username}\r\n          name=\"Username\"\r\n          onChange={({ target }) => setUsername(target.value)}\r\n        />\r\n      </div>\r\n      <div>\r\n        password\r\n          <input\r\n          type=\"password\"\r\n          value={password}\r\n          name=\"Password\"\r\n          onChange={({ target }) => setPassword(target.value)}\r\n        />\r\n      </div>\r\n      <button type=\"submit\">login</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Blogs</h2>\r\n      <div>\r\n          <p>{user.name} logged in</p>\r\n        \r\n        </div>\r\n      {blogs.map(blog =>\r\n        <Blog key={blog.id} blog={blog} />\r\n      )}\r\n      <Notification message={errorMessage} />\r\n    </div>\r\n  )\r\n\r\n \r\n  // const blogForm = () => (\r\n  //   <form onSubmit={addBlog}>\r\n  //     <input\r\n  //       value={newBlog}\r\n  //       onChange={handleBlogChange}\r\n  //     />\r\n  //     <button type=\"submit\">save</button>\r\n  //   </form>  \r\n  // )\r\n\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}